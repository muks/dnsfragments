<?xml version="1.0"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC1035 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC1123 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY RFC3542 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3542.xml">
<!ENTITY RFC5681 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5681.xml">
<!ENTITY RFC6891 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY I-D.dnsop-cookies SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dnsop-cookies-02.xml">
<!ENTITY I-D.dnsop-respsize SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dnsop-respsize-15.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<?rfc tocappendix="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc comments="no" ?>
<?rfc inline="yes" ?>
<rfc category="exp" docName="draft-dnsop-dns-message-fragments-00" ipr="trust200902">

  <front>

    <title>DNS message fragments</title>

    <author fullname="Mukund Sivaraman" initials="M." surname="Sivaraman">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>94063</code>
          <region>CA</region>
          <country>USA</country>
        </postal>
        <email>muks@isc.org</email>
        <uri>http://www.isc.org/</uri>
      </address>
    </author>

    <author fullname="Shane Kerr" initials="S." surname="Kerr">
      <organization>Beijing Internet Institute</organization>
      <address>
        <postal>
          <street>2/F, Building 5, No.58 Jinghai Road, BDA</street>
          <city>Beijing</city>
          <code>100176</code>
          <country>CN</country>
        </postal>
        <email>shane@biigroup.cn</email>
        <uri>http://www.biigroup.com/</uri>
      </address>
    </author>


    <author fullname="Linjian Song" initials="L." surname="Song">
      <organization>Beijing Internet Institute</organization>
      <address>
        <postal>
          <street>2508 Room, 25th Floor, Tower A, Time Fortune</street>
          <city>Beijing</city>
          <region></region>
          <code>100028</code>
          <country>P. R. China</country>
        </postal>
        <email>songlinjian@gmail.com</email>
        <uri>http://www.biigroup.com/</uri>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>Internet Area</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- <keyword>dns</keyword> -->

    <abstract>
      <t>This document describes a method to transmit DNS messages over
      multiple UDP datagrams by fragmenting them at the application
      layer.  The goal is to allow authoriative servers to successfully
      reply via UDP, even if problems in the network do not allow large
      packets or TCP/53 through .</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">
      <section title="Background">
	<t><xref target="RFC1035" /> describes how DNS messages are to
	be transmitted over UDP. A DNS query message is transmitted
	using one UDP datagram from client to server, and a
	corresponding DNS reply message is transmitted using one UDP
	datagram from server to client.</t>

	<t>The upper limit on the size of a DNS message that can be
	transmitted thus depends on the maximum size of the UDP datagram
	that can be transmitted successfully from the sender to the
	receiver. Typically any size limit only matters for DNS replies,
	as DNS queries are usually small.</t>
	
	<t>As a UDP datagram is transmitted in a single IP PDU, in theory 
	the size of a UDP datagram (including various lower internet layer 
	headers) can be as large as 64 KiB. But practically, if the datagram 
	size exceeds the path MTU, then the datagram will either be fragmented 
	at the IP layer, or will be dropped in the middle. In the case of IPv6 
	DNS packet is always fragmented by the sender. If a packet size exceeds 
	the path MTU, Packet Too Big (PTB) ICMP message will be received by 
	sender with no clue for sender to reply again with smaller size, due to 
	stateless feature of DNS. So a initiator asks for large DNS response packet 
	has risk of no response which poison the DNS transaction <xref target="Fragment-Poisonous"/>. 
	</t>
	
	<t>As a result, a practical DNS payload size limitation is necessary. 
	<xref target="RFC1035" /> limited DNS message UDP datagram lengths to a 
	maximum of 512 bytes. Although EDNS0<xref target="RFC6891" /> allows a 
	initiator to advertise the capability of receiving lager packets(up to 
	4096 byte), it leads to fragmentation because practically most packets 
	are limited to 1500 bytes long due to host-ethernet interfaces, or 1280 
	bytes long due to minimum IPv6 MTU in IPv6 stack <xref target="RFC3542" />. </t> 
		 
	<t>According to the DNS specification<xref target="RFC1123" />,if the DNS 
	response message can not fit within the packets size limit, the response 
	is truncated and the initiator will use TCP as a fallback to re-query for 
	large response. However, not to mention the high cost introduced by TCP, 
	some firewalls and middle boxes even block TCP/53 which cause no response 
	issue as well. It become a notable issue when the DNS response size inevitably 
	increase in the case of DNSSEC deployment .</t>


	<t>In this memo, DNS message fragmentation attempts to work around the DNS 
	payload limitation and middle box misbehavior by splitting a single DNS message 
	across multiple UDP DNS packets. Note that to avoid DNS amplification or 
	reflection attacks, DNS cookies <xref target="I-D.ietf-dnsop-cookies"/> must be used.</t>
      </section>

      <section title="Motivation">
	<t>It is not a new topic regarding large DNS packets(>512B) issue 
	<xref target="I-D.ietf-dnsop-respsize"/>, starting from introduction of 
	IPv6, EDNS0 <xref target="SAC016"/>, and DNSSEC deployment <xref target="SAC035"/>. 
	In current production network, DNSSEC with longer Key (ZSK>1024B and KSK>2048B) 
	will coin larger response packets no less than 1500B<xref target="T-DNS"/>. 
	Especially during the KSK rollover process, the response to the query of DNSKEY	
	RRset will be enlarged by containing both the new and old KSK. </t>
		
	<t>When possible, we should avoid dropped packets, as this means the client 
	must wait for a timeout, which is a high cost. For example, a validator 
	behind a firewall suffers from the timeout with no response, if the firwall 
	drops large EDNS0 packets and IP fragement. It may even cause disaster when 
	the validator can not recieve response for new trust anchor KSK due to the 
	extreme case of stupid middle box which also drop TCP/53.</t>
		
		
	<t>Since UDP requires fewer packets on the wire and less state on servers 
	than TCP, in this memo we still propose UDP as transmission protocol but 
	fragment the larger DNS packets into small DNS packets. We would like the 
	fragments can easily go through the middle box and avoid having to fal 
	back to TCP when possible as well.</t> 
			
	<t>Note that this mechanism is not necessary to replace all DNS transaction. 
	It can be triggered by some event or used for special case like KSK rollover 
	process. </t>

	      </section>
    </section>

    <section title="DNS Message Fragmentation Method">
      <section title="Client Behavior">
	<t>Clients supporting DNS message fragmentation add an EDNS
	option to their queries, which declares their support.</t>

	<t>If a DNS reply is received that has been fragmented, it
	will consist of DNS messages in UDP packets, which have an
	EDNS option which says how many total fragments there are, and
	the sequence number that the current packet represents. The
	client collects all of the fragments and use them to
	reconstruct the full DNS message. Clients MUST have a maximum
	time waiting for all of the fragments to arrive.</t>

	<t>Clients MUST be able to reassemble fragments into a DNS
	message of any size, up to the maximum of 65K.</t>

	<t>The client MAY save information about what sizes of packets
	have been received from a given server. If saved, this
	information MUST have a limited duration.</t>

	<t>Any DNSSEC validation is performed on the reassembled
	packet.</t>

	<t> Shane: Do we want discussion of resolver behavior in particular?
        My thinking is that this belongs in another section, if at
	all...</t>
      </section>
      <section title="Server Behavior">
        <t>Servers supporting DNS message fragmentation will look for
	the EDNS option which declares client support. If not present,
	the server MUST NOT use DNS message fragmentation.</t>

	<t>The server prepares the response normally. If it exceeds
	the maximum packet size specified by the client, then it will
	fragment the reply.</t>

	<t>Each fragment contains the same DNS header, possibly
	varying only with the answer count, authority count, and
	additional count. As many RR are included in each fragment as
	are possible without going over the desired size of the
	fragment. An EDNS option is added which includes both the
	fragment sequence number and the total number of
	fragments.</t>

	<t>The server needs to know how many total fragments there
	are as it generates each fragment. A simple approach would be
	to create each fragment, and then count the total number at
	the end, and update the previously-generated fragments with
	the total number of fragments. Other techniques may be
	possible.</t>

	<t>The server SHOULD limit the number of fragments that it
	uses in a reply.</t>

	<texttable>
	  <preamble>The server should use the following sizes for each
	  packet in the sequence in IPv4:</preamble>
	  <ttcol>Fragment ID</ttcol>
	  <ttcol>Size</ttcol>
	  <c>1</c><c>min(512, client_specified_max)</c>
	  <c>2</c><c>min(1460, client_specified_max)</c>
	  <c>3</c><c>min(1480, client_specified_max)</c>
	  <c>N</c><c>min(1480, client_specified_max)</c>
	  <postamble>The idea is that the first packet will always get
	  through since if a 512 octet packet doesn't work, DNS does
	  not function. We then increase to sizes that are likely to
	  get through. 1460 is the 1500 octet Ethernet packet size,
	  minus the IP header overhead and enough space to support
	  tunneled traffic. 1480 is the 1500 octet Ethernet packet
	  size, minus the IP header overhead.
	  </postamble>
	</texttable>

	<texttable>
	  <preamble>The server should use the following sizes for each
	  packet in the sequence in IPv6:</preamble>
	  <ttcol>Fragment ID</ttcol>
	  <ttcol>Size</ttcol>
	  <c>1</c><c>min(1240, client_specified_max)</c>
	  <c>2</c><c>min(1420, client_specified_max)</c>
	  <c>3</c><c>min(1460, client_specified_max)</c>
	  <c>N</c><c>min(1460, client_specified_max)</c>
	  <postamble>Like with IPv4, the idea is that the first packet
	  will always get through. In this case we use the
	  IPv6-mandated 1280 octets, minus the IP header overhead.
	  We then increase to 1420, which is the 1500 octet Ethernet
	  packet size, minus the IP header overhead and enough space
	  to support tunneled traffic. 1460 is the 1500 octet Ethernet
	  packet size, minus the IP header overhead.
	  </postamble>
	</texttable>
      </section>
      <section title="Other Notes"><t>
	<list style="symbols">
	  <t>The FRAGMENT option MUST NOT be present in DNS query
	  messages, i.e., when QR=0. If a DNS implementation notices the
	  FRAGMENT option in a DNS query message, it MUST ignore it.</t>

	  <t>In DNS reply messages, the FRAGMENT option MUST NOT be
	  present in datagrams when truncation is not done, i.e., when
	  TC=0. If a DNS implementation notices the FRAGMENT option in a
	  DNS reply message fragment datagram that is not truncated,
	  i.e, when TC=0, it MUST drop all DNS reply message fragment
	  datagrams received for that message's corresponding question
	  tuple (server IP, port, message ID) without using any data
	  from them.</t>

          <t>Shane: why are we setting TC?</t>

	  <t>More than one FRAGMENT option MUST NOT be present in a DNS
	  reply message fragment datagram. If a DNS implementation
	  notices multiple FRAGMENT options in a DNS reply message
	  fragment datagram, it MUST drop all reply datagrams received
	  for that message's corresponding question tuple (server IP,
	  port, message ID) without using any data from them.</t>
	</list></t>
      </section>
    </section>

    <section title="The ALLOW-FRAGMENTS EDNS(0) Option">

      <t>ALLOW-FRAGMENTS is an EDNS(0) <xref target="RFC6891" />
      option that a client uses to inform a server that it supports
      fragmented responses.</t>

      <section title="Wire Format">
	<t>TBD.</t>
      </section>

      <section title="Option Fields">
	<section title="Maximum Fragment Size">
	  <t>The Maximum Fragment Size field is represented as an
	  unsigned 16-bit integer. This is the maximum size used by
	  any given fragment the server returns.</t>
	</section>
      </section>
      <section title="Presentation Format">
	<t>As with other EDNS(0) options, the ALLOW-FRAGMENTS option
	does not have a presentation format.</t>
      </section>
    </section>

    <section title="The FRAGMENT EDNS(0) Option">

      <t>FRAGMENT is an EDNS(0) <xref target="RFC6891" /> option that
      assists a client in gathering the various fragments of a DNS
      message from multiple UDP datagrams. It is described in the
      previous section. Here, its syntax is provided.</t>

      <section title="Wire Format">
	<t>TBD.</t>
      </section>

      <section title="Option Fields">
	<section title="Fragment Identifier">
	  <t>The Fragment Identifier field is represented as an unsigned
	  8-bit integer. The first fragment is identified as 1. Values
	  in the range [1,255] can be used to identify the various
	  fragments. Value 0 is used for signalling purposes.</t>
	</section>
	<section title="Fragment Count">
	  <t>The Fragment Count field is represented as an unsigned
	  8-bit integer. It contains the number of fragments in the
	  range [1,255] that make up the DNS message. Value 0 is used
	  for signalling purposes.</t>
	</section>
      </section>
      <section title="Presentation Format">
	<t>As with other EDNS(0) options, the FRAGMENT option does not
	have a presentation format.</t>
      </section>
    </section>

    <section title="Network Considerations">
      <section title="Background">
	<t>TCP-based application protocols co-exist well with competing
	traffic flows in the internet due to congestion control methods
	such as in <xref target="RFC5681" /> that are present in TCP
	implementations.</t>

	<t>UDP-based application protocols have no restrictions in lower
	layers to stop them from flooding datagrams into a network and
	causing congestion. So applications that use UDP have to check
	themselves from causing congestion so that their traffic is not
	disruptive.</t>

	<t>In the case of <xref target="RFC1035" />, only one reply UDP
	datagram was sent per request UDP datagram, and so the lock-step
	flow control automatically ensured that UDP DNS traffic didn't
	lead to congestion. When DNS clients didn't hear back from the
	server, and had to retransmit the question, they typically paced
	themselves by using methods such as a retransmission timer based
	on a smoothed round-trip time between client and server.</t>

	<t>Due to the message fragmentation described in this document,
	when a DNS query causes multiple DNS reply datagrams to be sent
	back to the client, there is a risk that without effective
	control of flow, DNS traffic could cause problems to competing
	flows along the network path.</t>

	<t>Because UDP does not guarantee delivery of datagrams, there
	is a possibility that one or more fragments of a DNS message
	will be lost during transfer. This is especially a problem on
	some wireless networks where a rate of datagrams can continually
	be lost due to interference and other environmental
	factors. With larger numbers of message fragments, the
	probability of fragment loss increases.</t>
      </section>

      <section title="Implementation Requirements">
	<t>TBD.</t>
      </section>

    </section>

    <section title="Security Considerations">
      <t>To avoid DNS amplification or reflection attacks,
      DNS cookies <xref target="I-D.ietf-dnsop-cookies"/> must be used.</t>
    </section>

    <section title="IANA Considerations">
      <t>The ALLOW-FRAGMENTS and FRAGMENT EDNS(0) options require
      option codes to be assigned for them.</t>
    </section>

    <section title="Acknowledgements">
      <t>Thanks to Stephen Morris, JINMEI Tatuya, Paul Vixie, Mark
      Andrews, and David Dragon for reviewing a pre-draft proposal and
      providing support, comments and suggestions.</t>
    </section>

  </middle>

  <back>

    <references title="References">
      &RFC1035;&RFC1123; &RFC5681; &RFC6891;&RFC3542;
      &I-D.dnsop-cookies;&I-D.dnsop-respsize;

    <reference anchor="Fragment-Poisonous">
	            <front>
	                <title>Fragmentation Considered Poisonous</title>
			<author fullname="Herzberg, A."  initials="A." surname="Herzberg"></author>
			<author fullname=" H. Shulman"  initials="H." surname="Shulman"></author>
			<date year="2012" />            
	            </front>
	   </reference>
	   <reference anchor="SAC016">
            <front>
                <title>Testing Firewalls for IPv6 and EDNS0 Support</title>
                <author>
                    <organization>ICANN Security and Stability Advisory Committee</organization>
                </author>
                <date year="2007" />
            </front>
     </reference>
     
     <reference anchor="T-DNS" target="http://www.isi.edu/~johnh/PAPERS/Zhu14b.pdf">
	        <front>
	                <title>T-DNS: Connection-Oriented DNS to Improve Privacy and Security (extended)</title>
			<author fullname="Liang Zhu"  initials="L" surname="Zhu"></author>
			<author fullname="Zi Hu"  initials="Z" surname="Hu"></author>
			<author fullname="J. Heidemann"  initials="J." surname="Heidemann"></author>
			<date year="2007" />            
		</front>
	</reference>
		   <reference anchor="SAC035">
            <front>
                <title>DNSSEC Impact on Broadband Routers and Firewalls </title>
                <author>
                    <organization>ICANN Security and Stability Advisory Committee</organization>
                </author>
                <date year="2008" />
            </front>
     </reference>
     </references>

    <section title="Change History (to be removed before publication)">
      <t>
        <list style="symbols">

          <t>
	  draft-dnsop-dns-message-fragments-00
          <vspace/>
          Initial draft.
          </t>

        </list>
      </t>
    </section>

  </back>
</rfc>
